//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/GuerrillaMail/src/main/java/in/kyle/mail/Email.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "in/kyle/mail/Email.h"
#include "java/lang/Integer.h"
#include "java/util/Objects.h"

@interface InKyleMailEmail () {
 @public
  jint id__;
  NSString *from_;
  NSString *subject_;
  NSString *content_;
}

@end

J2OBJC_FIELD_SETTER(InKyleMailEmail, from_, NSString *)
J2OBJC_FIELD_SETTER(InKyleMailEmail, subject_, NSString *)
J2OBJC_FIELD_SETTER(InKyleMailEmail, content_, NSString *)

@implementation InKyleMailEmail

- (instancetype __nonnull)initWithInt:(jint)id_
                         withNSString:(NSString *)from
                         withNSString:(NSString *)subject
                         withNSString:(NSString *)content {
  InKyleMailEmail_initWithInt_withNSString_withNSString_withNSString_(self, id_, from, subject, content);
  return self;
}

- (jint)getId {
  return id__;
}

- (NSString *)getFrom {
  return from_;
}

- (NSString *)getSubject {
  return subject_;
}

- (NSString *)getContent {
  return content_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  InKyleMailEmail *email = (InKyleMailEmail *) cast_chk(o, [InKyleMailEmail class]);
  return id__ == email->id__ && JavaUtilObjects_equalsWithId_withId_(from_, email->from_) && JavaUtilObjects_equalsWithId_withId_(subject_, email->subject_) && JavaUtilObjects_equalsWithId_withId_(content_, email->content_);
}

- (NSUInteger)hash {
  return JavaUtilObjects_hash__WithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(id__), from_, subject_, content_ } count:4 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(from_);
  RELEASE_(subject_);
  RELEASE_(content_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:withNSString:withNSString:);
  methods[1].selector = @selector(getId);
  methods[2].selector = @selector(getFrom);
  methods[3].selector = @selector(getSubject);
  methods[4].selector = @selector(getContent);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "I", .constantValue.asLong = 0, 0x12, 4, -1, -1, -1 },
    { "from_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "subject_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "content_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LNSString;LNSString;", "equals", "LNSObject;", "hashCode", "id" };
  static const J2ObjcClassInfo _InKyleMailEmail = { "Email", "in.kyle.mail", ptrTable, methods, fields, 7, 0x1, 7, 4, -1, -1, -1, -1, -1 };
  return &_InKyleMailEmail;
}

@end

void InKyleMailEmail_initWithInt_withNSString_withNSString_withNSString_(InKyleMailEmail *self, jint id_, NSString *from, NSString *subject, NSString *content) {
  NSObject_init(self);
  self->id__ = id_;
  JreStrongAssign(&self->from_, from);
  JreStrongAssign(&self->subject_, subject);
  JreStrongAssign(&self->content_, content);
}

InKyleMailEmail *new_InKyleMailEmail_initWithInt_withNSString_withNSString_withNSString_(jint id_, NSString *from, NSString *subject, NSString *content) {
  J2OBJC_NEW_IMPL(InKyleMailEmail, initWithInt_withNSString_withNSString_withNSString_, id_, from, subject, content)
}

InKyleMailEmail *create_InKyleMailEmail_initWithInt_withNSString_withNSString_withNSString_(jint id_, NSString *from, NSString *subject, NSString *content) {
  J2OBJC_CREATE_IMPL(InKyleMailEmail, initWithInt_withNSString_withNSString_withNSString_, id_, from, subject, content)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(InKyleMailEmail)
